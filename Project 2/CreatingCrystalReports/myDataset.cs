//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CreatingCrystalReports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class myDataset : DataSet {
        
        private myPersonalInfoTableDataTable tablemyPersonalInfoTable;
        
        public myDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected myDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["myPersonalInfoTable"] != null)) {
                    this.Tables.Add(new myPersonalInfoTableDataTable(ds.Tables["myPersonalInfoTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public myPersonalInfoTableDataTable myPersonalInfoTable {
            get {
                return this.tablemyPersonalInfoTable;
            }
        }
        
        public override DataSet Clone() {
            myDataset cln = ((myDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["myPersonalInfoTable"] != null)) {
                this.Tables.Add(new myPersonalInfoTableDataTable(ds.Tables["myPersonalInfoTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablemyPersonalInfoTable = ((myPersonalInfoTableDataTable)(this.Tables["myPersonalInfoTable"]));
            if ((this.tablemyPersonalInfoTable != null)) {
                this.tablemyPersonalInfoTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "myDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/myDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablemyPersonalInfoTable = new myPersonalInfoTableDataTable();
            this.Tables.Add(this.tablemyPersonalInfoTable);
        }
        
        private bool ShouldSerializemyPersonalInfoTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void myPersonalInfoTableRowChangeEventHandler(object sender, myPersonalInfoTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class myPersonalInfoTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstudentID;
            
            private DataColumn columnfirstName;
            
            private DataColumn columnlastName;
            
            private DataColumn columnbirthDate;
            
            private DataColumn columnaddress;
            
            private DataColumn columncontactNo;
            
            internal myPersonalInfoTableDataTable() : 
                    base("myPersonalInfoTable") {
                this.InitClass();
            }
            
            internal myPersonalInfoTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn studentIDColumn {
                get {
                    return this.columnstudentID;
                }
            }
            
            internal DataColumn firstNameColumn {
                get {
                    return this.columnfirstName;
                }
            }
            
            internal DataColumn lastNameColumn {
                get {
                    return this.columnlastName;
                }
            }
            
            internal DataColumn birthDateColumn {
                get {
                    return this.columnbirthDate;
                }
            }
            
            internal DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            internal DataColumn contactNoColumn {
                get {
                    return this.columncontactNo;
                }
            }
            
            public myPersonalInfoTableRow this[int index] {
                get {
                    return ((myPersonalInfoTableRow)(this.Rows[index]));
                }
            }
            
            public event myPersonalInfoTableRowChangeEventHandler myPersonalInfoTableRowChanged;
            
            public event myPersonalInfoTableRowChangeEventHandler myPersonalInfoTableRowChanging;
            
            public event myPersonalInfoTableRowChangeEventHandler myPersonalInfoTableRowDeleted;
            
            public event myPersonalInfoTableRowChangeEventHandler myPersonalInfoTableRowDeleting;
            
            public void AddmyPersonalInfoTableRow(myPersonalInfoTableRow row) {
                this.Rows.Add(row);
            }
            
            public myPersonalInfoTableRow AddmyPersonalInfoTableRow(string studentID, string firstName, string lastName, System.DateTime birthDate, string address, string contactNo) {
                myPersonalInfoTableRow rowmyPersonalInfoTableRow = ((myPersonalInfoTableRow)(this.NewRow()));
                rowmyPersonalInfoTableRow.ItemArray = new object[] {
                        studentID,
                        firstName,
                        lastName,
                        birthDate,
                        address,
                        contactNo};
                this.Rows.Add(rowmyPersonalInfoTableRow);
                return rowmyPersonalInfoTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                myPersonalInfoTableDataTable cln = ((myPersonalInfoTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new myPersonalInfoTableDataTable();
            }
            
            internal void InitVars() {
                this.columnstudentID = this.Columns["studentID"];
                this.columnfirstName = this.Columns["firstName"];
                this.columnlastName = this.Columns["lastName"];
                this.columnbirthDate = this.Columns["birthDate"];
                this.columnaddress = this.Columns["address"];
                this.columncontactNo = this.Columns["contactNo"];
            }
            
            private void InitClass() {
                this.columnstudentID = new DataColumn("studentID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstudentID);
                this.columnfirstName = new DataColumn("firstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfirstName);
                this.columnlastName = new DataColumn("lastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastName);
                this.columnbirthDate = new DataColumn("birthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbirthDate);
                this.columnaddress = new DataColumn("address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddress);
                this.columncontactNo = new DataColumn("contactNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontactNo);
            }
            
            public myPersonalInfoTableRow NewmyPersonalInfoTableRow() {
                return ((myPersonalInfoTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new myPersonalInfoTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(myPersonalInfoTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.myPersonalInfoTableRowChanged != null)) {
                    this.myPersonalInfoTableRowChanged(this, new myPersonalInfoTableRowChangeEvent(((myPersonalInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.myPersonalInfoTableRowChanging != null)) {
                    this.myPersonalInfoTableRowChanging(this, new myPersonalInfoTableRowChangeEvent(((myPersonalInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.myPersonalInfoTableRowDeleted != null)) {
                    this.myPersonalInfoTableRowDeleted(this, new myPersonalInfoTableRowChangeEvent(((myPersonalInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.myPersonalInfoTableRowDeleting != null)) {
                    this.myPersonalInfoTableRowDeleting(this, new myPersonalInfoTableRowChangeEvent(((myPersonalInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemyPersonalInfoTableRow(myPersonalInfoTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class myPersonalInfoTableRow : DataRow {
            
            private myPersonalInfoTableDataTable tablemyPersonalInfoTable;
            
            internal myPersonalInfoTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemyPersonalInfoTable = ((myPersonalInfoTableDataTable)(this.Table));
            }
            
            public string studentID {
                get {
                    try {
                        return ((string)(this[this.tablemyPersonalInfoTable.studentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.studentIDColumn] = value;
                }
            }
            
            public string firstName {
                get {
                    try {
                        return ((string)(this[this.tablemyPersonalInfoTable.firstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.firstNameColumn] = value;
                }
            }
            
            public string lastName {
                get {
                    try {
                        return ((string)(this[this.tablemyPersonalInfoTable.lastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.lastNameColumn] = value;
                }
            }
            
            public System.DateTime birthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablemyPersonalInfoTable.birthDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.birthDateColumn] = value;
                }
            }
            
            public string address {
                get {
                    try {
                        return ((string)(this[this.tablemyPersonalInfoTable.addressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.addressColumn] = value;
                }
            }
            
            public string contactNo {
                get {
                    try {
                        return ((string)(this[this.tablemyPersonalInfoTable.contactNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemyPersonalInfoTable.contactNoColumn] = value;
                }
            }
            
            public bool IsstudentIDNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.studentIDColumn);
            }
            
            public void SetstudentIDNull() {
                this[this.tablemyPersonalInfoTable.studentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsfirstNameNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.firstNameColumn);
            }
            
            public void SetfirstNameNull() {
                this[this.tablemyPersonalInfoTable.firstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IslastNameNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.lastNameColumn);
            }
            
            public void SetlastNameNull() {
                this[this.tablemyPersonalInfoTable.lastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsbirthDateNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.birthDateColumn);
            }
            
            public void SetbirthDateNull() {
                this[this.tablemyPersonalInfoTable.birthDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsaddressNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.addressColumn);
            }
            
            public void SetaddressNull() {
                this[this.tablemyPersonalInfoTable.addressColumn] = System.Convert.DBNull;
            }
            
            public bool IscontactNoNull() {
                return this.IsNull(this.tablemyPersonalInfoTable.contactNoColumn);
            }
            
            public void SetcontactNoNull() {
                this[this.tablemyPersonalInfoTable.contactNoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class myPersonalInfoTableRowChangeEvent : EventArgs {
            
            private myPersonalInfoTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public myPersonalInfoTableRowChangeEvent(myPersonalInfoTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public myPersonalInfoTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
